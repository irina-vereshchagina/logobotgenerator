üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:

 - bot.py
 - config.py
 - keyboards.py
 - test.py
 - tree.py
 - handlers\generation.py
 - handlers\info.py
 - handlers\prompt.py
 - handlers\start.py
 - handlers\__init__.py
 - services\logo_generator.py
 - services\__init__.py
 - utils\user_state.py
 - utils\__init__.py

üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤:


üîπ bot.py:
------------------------------------------------------------
import logging
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart  # ‚Üê –≤–æ—Ç —ç—Ç–æ –¥–æ–±–∞–≤—å
from config import TELEGRAM_BOT_TOKEN
from handlers import start, info, prompt, generation

logging.basicConfig(level=logging.INFO)

defaults = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=defaults)
dp = Dispatcher()

dp.message.register(start.start, CommandStart())
dp.message.register(info.info, lambda m: m.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
dp.message.register(prompt.prompt_for_idea, lambda m: m.text == "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞")
dp.message.register(generation.handle_idea, lambda m: m.text and not m.text.startswith("/"))

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))


üîπ config.py:
------------------------------------------------------------
import os
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
USE_PLACEHOLDER = os.getenv("USE_PLACEHOLDER")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")


üîπ keyboards.py:
------------------------------------------------------------
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞")],
            [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
        ],
        resize_keyboard=True
    )


üîπ test.py:
------------------------------------------------------------
import requests
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏–∑ .env
user = os.getenv('VECTORIZE_USER')
password = os.getenv('VECTORIZE_PASS')

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
response = requests.post(
    'https://ru.vectorizer.ai/api/v1/vectorize',
    files={'image': open('image.jpg', 'rb')},
    data={'mode': 'test'},
    auth=(user, password)
)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
if response.status_code == requests.codes.ok:
    with open('result.svg', 'wb') as out:
        out.write(response.content)
else:
    print("Error:", response.status_code, response.text)

üîπ tree.py:
------------------------------------------------------------
import os

IGNORE_DIRS = {"__pycache__", ".git", "venv", ".venv", "env", ".idea", ".mypy_cache", ".vscode"}
IGNORE_FILES = {".env"}

def list_files(base_path="."):
    summary = []

    for root, dirs, files in os.walk(base_path):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏
        dirs[:] = [d for d in dirs if d not in IGNORE_DIRS]
        files = [f for f in files if f.endswith(".py") and f not in IGNORE_FILES]

        # –°—Ç—Ä–æ–∏–º "–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å"
        rel_root = os.path.relpath(root, base_path)
        for f in files:
            path = os.path.join(rel_root, f) if rel_root != "." else f
            summary.append(path)

    return summary

def print_project_structure(base_path="."):
    print("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:\n")
    for path in list_files(base_path):
        print(f" - {path}")
    print("\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤:\n")

    for path in list_files(base_path):
        print(f"\nüîπ {path}:\n{'-'*60}")
        with open(os.path.join(base_path, path), "r", encoding="utf-8") as f:
            print(f.read())

if __name__ == "__main__":
    import sys
    with open('tree.txt', "w", encoding="utf-8") as f:
        sys.stdout = f  # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º print –≤ —Ñ–∞–π–ª
        print_project_structure()


üîπ handlers\generation.py:
------------------------------------------------------------
from aiogram import types
from utils.user_state import single_user_lock, is_generating, set_generating
from services.logo_generator import generate_image
from aiogram.types import BufferedInputFile
import logging

async def handle_idea(message: types.Message):
    user_id = message.from_user.id

    if is_generating(user_id):
        await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞.")
        return

    async with single_user_lock(user_id):
        set_generating(user_id, True)
        await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ª–æ–≥–æ—Ç–∏–ø, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
        try:
            image = await generate_image(message.text)
            image.seek(0)
            input_file = BufferedInputFile(file=image.read(), filename="logo.png")
            await message.answer_photo(photo=input_file, caption="–í–æ—Ç –ª–æ–≥–æ—Ç–∏–ø –ø–æ —Ç–≤–æ–µ–π –∏–¥–µ–µ!")
            await message.answer("üí° –ü—Ä–∏—à–ª–∏ –µ—â—ë –∏–¥–µ—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞!")
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        finally:
            set_generating(user_id, False)


üîπ handlers\info.py:
------------------------------------------------------------
from aiogram import types

async def info(message: types.Message):
    await message.answer(
        "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ —á–µ—Ä–µ–∑ GPT-4o + DALL¬∑E 3.\n\n"
        "–ñ–º–∏ 'üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞' –∏ –æ—Ç–ø—Ä–∞–≤—å –∏–¥–µ—é."
    )


üîπ handlers\prompt.py:
------------------------------------------------------------
from aiogram import types

async def prompt_for_idea(message: types.Message):
    await message.answer(
        "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å –∏–¥–µ—é –ª–æ–≥–æ—Ç–∏–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏ –≤ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ')",
    )


üîπ handlers\start.py:
------------------------------------------------------------
from aiogram import types
from aiogram.filters import CommandStart
from keyboards import get_main_keyboard

async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )


üîπ handlers\__init__.py:
------------------------------------------------------------


üîπ services\logo_generator.py:
------------------------------------------------------------
import requests
from io import BytesIO
import asyncio
from config import USE_PLACEHOLDER, OPENAI_API_KEY

async def generate_image(prompt: str) -> BytesIO:
    if USE_PLACEHOLDER:
        await asyncio.sleep(2)
        url = "https://picsum.photos/1024"
        response = requests.get(url)
        response.raise_for_status()
        return BytesIO(response.content)

    from openai import OpenAI
    client = OpenAI(api_key=OPENAI_API_KEY)

    chat = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "–¢—ã —Å–æ–∑–¥–∞–µ—à—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ —á–µ—Ä–µ–∑ DALL¬∑E 3."},
            {"role": "user", "content": prompt}
        ]
    )

    prompt_dalle = chat.choices[0].message.content.strip()

    image_response = client.images.generate(
        model="dall-e-3",
        prompt=prompt_dalle,
        n=1,
        size="1024x1024",
        quality="standard",
        style="vivid",
    )

    image_url = image_response.data[0].url
    img_data = requests.get(image_url)
    img_data.raise_for_status()

    return BytesIO(img_data.content)


üîπ services\__init__.py:
------------------------------------------------------------


üîπ utils\user_state.py:
------------------------------------------------------------
import asyncio
from contextlib import asynccontextmanager

user_locks = {}
user_generation_flags = {}

@asynccontextmanager
async def single_user_lock(user_id: int):
    lock = user_locks.setdefault(user_id, asyncio.Lock())
    async with lock:
        yield

def is_generating(user_id):
    return user_generation_flags.get(user_id, False)

def set_generating(user_id, value: bool):
    user_generation_flags[user_id] = value


üîπ utils\__init__.py:
------------------------------------------------------------

