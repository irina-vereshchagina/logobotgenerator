import os
import logging
import requests
import asyncio
from io import BytesIO
from dotenv import load_dotenv
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# === –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ ===
WAITING_FOR_IDEA = 1

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
USE_PLACEHOLDER = os.getenv("USE_PLACEHOLDER") == "True"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ===
active_generations = set()  # user_ids –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

# === –ö–Ω–æ–ø–∫–∏ ===
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞")],
            [KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
        ],
        resize_keyboard=True,
    )

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(),
    )
    return ConversationHandler.END

# === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ª–æ–≥–æ—Ç–∏–ø—ã —Å –ø–æ–º–æ—â—å—é GPT-4o –∏ DALL¬∑E 3.\n\n"
        "–ù–∞–∂–º–∏ 'üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞' –∏ –æ—Ç–ø—Ä–∞–≤—å –∏–¥–µ—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "üëâ '–ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏ –≤ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ'"
    )
    return ConversationHandler.END

# === –ó–∞–≥–ª—É—à–∫–∞ / –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ===
async def generate_image(user_prompt: str) -> BytesIO:
    if USE_PLACEHOLDER:
        await asyncio.sleep(5)
        url = "https://picsum.photos/1024"
        response = requests.get(url)
        response.raise_for_status()
        image_file = BytesIO(response.content)
        image_file.name = "logo.png"
        return image_file

    from openai import OpenAI
    client = OpenAI(api_key=OPENAI_API_KEY)

    chat_response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "system",
                "content": (
                    "–¢—ã —Å–æ–∑–¥–∞—ë—à—å –≤–∏–∑—É–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–µ, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è DALL¬∑E 3. "
                    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞."
                )
            },
            {
                "role": "user",
                "content": f"–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø—Ä–æ–º–ø—Ç –¥–ª—è DALL¬∑E 3: {user_prompt}"
            }
        ],
        temperature=0.7
    )
    improved_prompt = chat_response.choices[0].message.content.strip()

    image_response = client.images.generate(
        model="dall-e-3",
        prompt=improved_prompt,
        n=1,
        size="1024x1024",
        quality="standard",
        style="vivid",
    )

    image_url = image_response.data[0].url
    image_data = requests.get(image_url)
    image_data.raise_for_status()

    image_file = BytesIO(image_data.content)
    image_file.name = "logo.png"
    return image_file

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞" ===
async def request_logo_idea(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å –∏–¥–µ—é –ª–æ–≥–æ—Ç–∏–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–Ω–∏–∂–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ').",
        reply_markup=ReplyKeyboardRemove(),
    )
    return WAITING_FOR_IDEA

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥–µ–∏ ===
async def handle_logo_idea(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_prompt = update.message.text.strip()

    if user_id in active_generations:
        await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∏–¥—ë—Ç. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
        return WAITING_FOR_IDEA

    active_generations.add(user_id)
    await update.message.chat.send_action(action=ChatAction.TYPING)
    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ª–æ–≥–æ—Ç–∏–ø, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    try:
        image = await generate_image(user_prompt)
        await update.message.reply_photo(photo=image, caption="–í–æ—Ç –ª–æ–≥–æ—Ç–∏–ø –ø–æ —Ç–≤–æ–µ–π –∏–¥–µ–µ!")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        active_generations.discard(user_id)

    await update.message.reply_text("–•–æ—á–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë? –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
    return ConversationHandler.END

# === –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
    return ConversationHandler.END

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞$"), request_logo_idea)],
        states={
            WAITING_FOR_IDEA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_logo_idea),
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è$"), info))
    app.add_handler(conv)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
