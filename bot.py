import os
import logging
import requests
from io import BytesIO
from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === OpenAI –∫–ª–∏–µ–Ω—Ç ===
client = OpenAI(api_key=OPENAI_API_KEY)

# === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ===
user_states = {}

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ ===
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞")],
            [KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
        ],
        resize_keyboard=True,
    )

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_states[update.effective_user.id] = {"busy": False}
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(),
    )

# === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===
async def handle_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ª–æ–≥–æ—Ç–∏–ø—ã —Å –ø–æ–º–æ—â—å—é GPT-4o –∏ DALL¬∑E 3. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ 'üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞' –∏ –æ–ø–∏—à–∏ –∏–¥–µ—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "üëâ '–õ–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏ –≤ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ'\n\n"
        "–û–±—ã—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç 10‚Äì15 —Å–µ–∫—É–Ω–¥.",
    )

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (GPT + DALL¬∑E) ===
async def generate_image(user_prompt: str) -> BytesIO:
    chat_response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "system",
                "content": (
                    "–¢—ã —Å–æ–∑–¥–∞—ë—à—å –≤–∏–∑—É–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–µ, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è DALL¬∑E 3. "
                    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞."
                )
            },
            {
                "role": "user",
                "content": f"–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø—Ä–æ–º–ø—Ç –¥–ª—è DALL¬∑E 3: {user_prompt}"
            }
        ],
        temperature=0.7
    )
    improved_prompt = chat_response.choices[0].message.content.strip()

    image_response = client.images.generate(
        model="dall-e-3",
        prompt=improved_prompt,
        n=1,
        size="1024x1024",
        quality="standard",
        style="vivid",
    )

    image_url = image_response.data[0].url
    image_data = requests.get(image_url)
    image_data.raise_for_status()

    image_file = BytesIO(image_data.content)
    image_file.name = "logo.png"
    return image_file

# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ—Ç–∏–ø–∞ ===
async def handle_idea(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if user_id not in user_states:
        user_states[user_id] = {"busy": False}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        return await handle_info(update, context)

    if text == "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–¥–µ—é –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ –∫–Ω–∏–≥').")
        return

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if user_states[user_id]["busy"]:
        await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏...")
        return

    user_states[user_id]["busy"] = True

    try:
        await update.message.chat.send_action(action=ChatAction.TYPING)
        await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ª–æ–≥–æ—Ç–∏–ø, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

        image_file = await generate_image(text)
        await update.message.reply_photo(photo=image_file, caption="–í–æ—Ç –ª–æ–≥–æ—Ç–∏–ø –ø–æ —Ç–≤–æ–µ–π –∏–¥–µ–µ!")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
    finally:
        user_states[user_id]["busy"] = False

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_idea))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
