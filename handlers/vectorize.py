from aiogram import types
from aiogram.types import BufferedInputFile
from utils.user_state import single_user_lock
import logging
import os
import requests
from dotenv import load_dotenv

load_dotenv()

VECTORIZE_USER = os.getenv("VECTORIZE_USER")
VECTORIZE_PASS = os.getenv("VECTORIZE_PASS")

# –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –∂–¥—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?
awaiting_image_users = set()

async def ask_for_image(message: types.Message):
    user_id = message.from_user.id
    awaiting_image_users.add(user_id)
    await message.answer("üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (JPG, PNG –∏ —Ç.–¥.).")

async def handle_vectorization_image(message: types.Message):
    user_id = message.from_user.id
    if user_id not in awaiting_image_users:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ—Ü–µ–ª–µ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    if not message.photo:
        await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–µ —Ñ–∞–π–ª –∏ –Ω–µ —Ç–µ–∫—Å—Ç.")
        return

    async with single_user_lock(user_id):
        try:
            photo = message.photo[-1]
            file = await message.bot.get_file(photo.file_id)
            downloaded_file = await message.bot.download_file(file.file_path)

            temp_path = f"temp_{user_id}.jpg"
            with open(temp_path, "wb") as f:
                f.write(downloaded_file.read())

            await message.answer("üîÑ –í–µ–∫—Ç–æ—Ä–∏–∑—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

            with open(temp_path, "rb") as img:
                response = requests.post(
                    'https://ru.vectorizer.ai/api/v1/vectorize',
                    files={'image': img},
                    data={'mode': 'test'},
                    auth=(VECTORIZE_USER, VECTORIZE_PASS)
                )

            os.remove(temp_path)

            if response.status_code == 200:
                svg_path = f"vectorized_{user_id}.svg"
                with open(svg_path, "wb") as f:
                    f.write(response.content)

                with open(svg_path, "rb") as f:
                    svg_file = BufferedInputFile(file=f.read(), filename="vectorized.svg")
                    await message.answer_document(document=svg_file, caption="‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                os.remove(svg_path)
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}\n{response.text}")

        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        finally:
            awaiting_image_users.discard(user_id)
