from aiogram import types
from aiogram.types import BufferedInputFile
from utils.user_state import single_user_lock, is_generating, set_generating
import logging
import os
import requests
from dotenv import load_dotenv

load_dotenv()

VECTORIZE_USER = os.getenv("VECTORIZE_USER")
VECTORIZE_PASS = os.getenv("VECTORIZE_PASS")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
awaiting_image_users = set()

async def ask_for_image(message: types.Message):
    user_id = message.from_user.id
    awaiting_image_users.add(user_id)
    await message.answer("üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (JPG, PNG –∏ —Ç.–¥.).")

async def handle_vectorization_image(message: types.Message):
    user_id = message.from_user.id

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
    if user_id not in awaiting_image_users:
        return

    # –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚Äî –Ω–µ –¥–∞—ë–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    if is_generating(user_id):
        await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not message.photo:
        await message.answer(
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPG, PNG). "
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø –ø–æ –∏–¥–µ–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ 'üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞'."
        )
        return

    async with single_user_lock(user_id):
        set_generating(user_id, True)
        try:
            photo = message.photo[-1]
            file = await message.bot.get_file(photo.file_id)
            downloaded_file = await message.bot.download_file(file.file_path)

            temp_path = f"temp_{user_id}.jpg"
            with open(temp_path, "wb") as f:
                f.write(downloaded_file.read())

            await message.answer("üîÑ –í–µ–∫—Ç–æ—Ä–∏–∑—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

            with open(temp_path, "rb") as img:
                response = requests.post(
                    'https://ru.vectorizer.ai/api/v1/vectorize',
                    files={'image': img},
                    data={'mode': 'test'},
                    auth=(VECTORIZE_USER, VECTORIZE_PASS)
                )

            os.remove(temp_path)

            if response.status_code == 200:
                svg_path = f"vectorized_{user_id}.svg"
                with open(svg_path, "wb") as f:
                    f.write(response.content)

                with open(svg_path, "rb") as f:
                    svg_file = BufferedInputFile(file=f.read(), filename="vectorized.svg")
                    await message.answer_document(document=svg_file, caption="‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                os.remove(svg_path)
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}\n{response.text}")

        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        finally:
            awaiting_image_users.discard(user_id)
            set_generating(user_id, False)
