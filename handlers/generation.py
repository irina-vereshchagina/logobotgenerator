from aiogram import types
from aiogram.fsm.context import FSMContext
from utils.states import GenerationStates
from utils.user_state import single_user_lock, is_generating, set_generating
from services.logo_generator import generate_image
from aiogram.types import BufferedInputFile
import logging

# üëá –¥–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç –¥–ª—è –∫–≤–æ—Ç
from services.subscriptions import get_quotas, dec_gen


async def handle_idea(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    state_now = await state.get_state()
    if state_now != GenerationStates.waiting_for_idea.state:
        print("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∏–¥–µ–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    user_id = message.from_user.id

    if not message.text:
        await message.answer("‚ùóÔ∏è–û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç —Å –∏–¥–µ–µ–π –ª–æ–≥–æ—Ç–∏–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞–º–∏.")
        return

    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–æ—Ç (–≤–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
    q = get_quotas(user_id)
    if q["gen_left"] <= 0:
        await message.answer("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞–∂–º–∏ ¬´üíé –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª –∏ –ø–æ–ø–æ–ª–Ω–∏ —Ç–∞—Ä–∏—Ñ.")
        return

    if is_generating(user_id):
        await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞.")
        return

    async with single_user_lock(user_id):
        # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω–∞ —Å–ª—É—á–∞–π –≥–æ–Ω–∫–∏)
        q = get_quotas(user_id)
        if q["gen_left"] <= 0:
            await message.answer("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞–∂–º–∏ ¬´üíé –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª.")
            return

        set_generating(user_id, True)
        await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ª–æ–≥–æ—Ç–∏–ø, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
            image = await generate_image(message.text)
            image.seek(0)
            input_file = BufferedInputFile(file=image.read(), filename="logo.png")
            await message.answer_photo(photo=input_file, caption="–í–æ—Ç –ª–æ–≥–æ—Ç–∏–ø –ø–æ —Ç–≤–æ–µ–π –∏–¥–µ–µ!")

            # 3) –°–ø–∏—Å—ã–≤–∞–µ–º –∫–≤–æ—Ç—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if not dec_gen(user_id):
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –±–∞–ª–∞–Ω—Å–∞. –ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            else:
                left = get_quotas(user_id)
                await message.answer(
                    f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å: {left['gen_left']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, {left['vec_left']} –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–π.\n"
                    f"üí° –ü—Ä–∏—à–ª–∏ –µ—â—ë –∏–¥–µ—é –∏–ª–∏ –Ω–∞–∂–º–∏ '‚¨ÖÔ∏è –í –º–µ–Ω—é'."
                )

        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        finally:
            set_generating(user_id, False)
